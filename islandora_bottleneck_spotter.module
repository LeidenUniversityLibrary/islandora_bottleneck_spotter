<?php

/**
 * @file
 * islandora_bottleneck_spotter.module
 *
 *
 *  Copyright 2019 Leiden University Library
 *
 *  This file is part of islandora_bottleneck_spotter.
 *
 *  islandora_bottleneck_spotter is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Page timing:
 */

/**
 * Implements hook_exit().
 */
function islandora_bottleneck_spotter_exit() {
  _islandora_bottleneck_spotter_mark('page end', array('REQUEST_TIME' => 'page'), (drupal_page_is_cacheable()?'cached':'not cached'), TRUE);
}


/**
 * Solr timing:
 */

/**
 * Implements hook_islandora_solr_query_alter().
 */
function islandora_bottleneck_spotter_islandora_solr_query_alter($solrobj) {
  $info = 'q:' . $solrobj->solrQuery;
  $params = array_merge($solrobj->internalSolrParams, $solrobj->solrParams, array('limit' => $solrobj->solrLimit));
  foreach ($params as $key => $value) {
    $info .= " $key:" . (is_array($value)?implode('|', $value):$value);
  }
  _islandora_bottleneck_spotter_mark('solr_query', NULL, $info);
}

/**
 * Implements hook_islandora_solr_query_result().
 */
function islandora_bottleneck_spotter_islandora_solr_query_result($results) {
  _islandora_bottleneck_spotter_mark('solr_result', array('solr_query' => 'solr'), 'found: ' . $results['response']['numFound']);
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_bottleneck_spotter_islandora_solr_primary_display() {
  _islandora_bottleneck_spotter_mark('solr_1_display');
  return array();
}

/**
 * Implements hook_islandora_solr_secondary_display().
 */
function islandora_bottleneck_spotter_islandora_solr_secondary_display() {
  _islandora_bottleneck_spotter_mark('solr_2_display');
  return array();
}

/**
 * Implements hook_islandora_solr_metadata_display_elements_alter().
 */
function islandora_bottleneck_spotter_islandora_solr_metadata_display_elements_alter(&$elements) {
  _islandora_bottleneck_spotter_mark('solr_md_display_alter');
}

/**
 * Implements hook_islandora_solr_metadata_description_elements_alter().
 */
function islandora_bottleneck_spotter_islandora_solr_metadata_description_elements_alter(&$elements) {
  _islandora_bottleneck_spotter_mark('solr_md_description_alter');
}

/**
 * Islandora module hooks:
 */

/**
 * Implements hook_islandora_view_object().
 */
function islandora_bottleneck_spotter_islandora_view_object($object, $user, $page_number = 0, $page_size = 0) {
  _islandora_bottleneck_spotter_mark('view_object', NULL, $object->id);
  return array();
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_bottleneck_spotter_islandora_object_access($op, $object, $user) {
  _islandora_bottleneck_spotter_mark('object_access', NULL, $object->id);
  return NULL; // don't mess with object access...
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_bottleneck_spotter_islandora_datastream_access($op, $object, $user) {
  _islandora_bottleneck_spotter_mark('datastream_access', NULL, $object->id . '@' . $object->parent->id);
  return NULL; // don't mess with datastream access...
}

/**
 * Drupal hooks:
 */

/**
 * Implements hook_ajax_render_alter().
 */
function islandora_bottleneck_spotter_ajax_render_alter() {
  _islandora_bottleneck_spotter_mark('ajax_render');
}

/**
 * Implements hook_block_cid_parts_alter().
 */
function islandora_bottleneck_spotter_block_cid_parts_alter(&$cid_parts, $block) {
  _islandora_bottleneck_spotter_mark('block_cid_parts', NULL, $block->delta);
}

/**
 * Implements hook_block_list_alter().
 */
function islandora_bottleneck_spotter_block_list_alter() {
  _islandora_bottleneck_spotter_mark('block_list');
}

/**
 * Implements hook_block_view_alter().
 */
function islandora_bottleneck_spotter_block_view_alter(&$data, $block) {
  _islandora_bottleneck_spotter_mark('block_view', NULL, $block->delta);
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function islandora_bottleneck_spotter_contextual_links_view_alter() {
  _islandora_bottleneck_spotter_mark('contextual_links_view');
}

/**
 * Implements hook_css_alter().
 */
function islandora_bottleneck_spotter_css_alter() {
  _islandora_bottleneck_spotter_mark('css_alter');
}

/**
 * Implements hook_drupal_goto_alter().
 */
function islandora_bottleneck_spotter_drupal_goto(&$path, &$options, &$http_response_code) {
  _islandora_bottleneck_spotter_mark('drupal_goto', NULL, $path);
}

/**
 * Implements hook_element_info_alter().
 */
function islandora_bottleneck_spotter_element_info_alter() {
  _islandora_bottleneck_spotter_mark('element_info_alter');
}

/**
 * Implements hook_entity_info_alter().
 */
function islandora_bottleneck_spotter_entity_info_alter() {
  _islandora_bottleneck_spotter_mark('entity_info_alter');
}

/**
 * Implements hook_entity_query_alter().
 */
function islandora_bottleneck_spotter_entity_query_alter() {
  _islandora_bottleneck_spotter_mark('entity_query_alter');
}

/**
 * Implements hook_entity_view_alter().
 */
function islandora_bottleneck_spotter_entity_view_alter(&$build, $type) {
  _islandora_bottleneck_spotter_mark('entity_view_alter', NULL, $type);
}

/**
 * Implements hook_file_copy().
 */
function islandora_bottleneck_spotter_file_copy($file, $source) {
  _islandora_bottleneck_spotter_mark('file_copy', NULL, $filename->filename . ' to ' . $source->filename);
}

/**
 * Implements hook_file_move().
 */
function islandora_bottleneck_spotter_file_move($file, $source) {
  _islandora_bottleneck_spotter_mark('file_move', NULL, $filename->filename . ' to ' . $source->filename);
}

/**
 * Implements hook_html_head_alter().
 */
function islandora_bottleneck_spotter_html_head_alter() {
  _islandora_bottleneck_spotter_mark('html_head_alter');
}

/**
 * Implements hook_js_alter().
 */
function islandora_bottleneck_spotter_js_alter() {
  _islandora_bottleneck_spotter_mark('js_alter');
}

/**
 * Implements hook_library_alter().
 */
function islandora_bottleneck_spotter_library_alter(&$libraries, $module) {
  _islandora_bottleneck_spotter_mark('library_alter', NULL, $module);
}

/**
 * Implements hook_menu_alter().
 */
function islandora_bottleneck_spotter_menu_alter() {
  _islandora_bottleneck_spotter_mark('menu_alter');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function islandora_bottleneck_spotter_menu_local_tasks_alter() {
  _islandora_bottleneck_spotter_mark('menu_local_tasks_alter');
}

/**
 * Implements hook_node_view_alter().
 */
function islandora_bottleneck_spotter_node_view_alter() {
  _islandora_bottleneck_spotter_mark('node_view_alter');
}

/**
 * Implements hook_page_alter().
 */
function islandora_bottleneck_spotter_page_alter() {
  _islandora_bottleneck_spotter_mark('page_alter');
}

/**
 * Implements hook_page_build().
 */
function islandora_bottleneck_spotter_page_build() {
  _islandora_bottleneck_spotter_mark('page_build');
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function islandora_bottleneck_spotter_page_delivery_callback_alter() {
  _islandora_bottleneck_spotter_mark('page_delivery_callback_alter');
}

/**
 * Implements hook_url_inbound_alter().
 */
function islandora_bottleneck_spotter_url_inbound_alter(&$path, $original_path, $path_language) {
  _islandora_bottleneck_spotter_mark('url_inbound_alter', NULL, $path);
}

/**
 * Implements hook_url_outbound_alter().
 */
function islandora_bottleneck_spotter_url_outbound_alter(&$path, $original_path, $path_language) {
  _islandora_bottleneck_spotter_mark('url_outbound_alter', NULL, $path);
}

/**
 * Implements hook_view().
 */
function islandora_bottleneck_spotter_view() {
  _islandora_bottleneck_spotter_mark('view');
}

/**
 * Implements hook_preprocess().
 */
function islandora_bottleneck_spotter_preprocess(&$variables, $hook) {
  _islandora_bottleneck_spotter_mark('preprocess', NULL, $hook);
}

/**
 * Implements hook_process().
 */
function islandora_bottleneck_spotter_process(&$variables, $hook) {
  _islandora_bottleneck_spotter_mark('process', NULL, $hook);
}


/**
 * Helper function to mark the time of each.
 *
 *  @param $what
 *    a label (string) for what to mark.
 *  @param $time_since
 *    an associative array containing one key and one value, used to log the
 *    total time between two related whats:
 *     - key is the name of the related what
 *     - value is the label for the total time
 *  @param $info
 *    array with additional info to log
 *  @param $printtolog
 *    BOOL indicating if it should be logged: only use this on hook_exit!
 */
function _islandora_bottleneck_spotter_mark($what, $time_since = NULL, $info = NULL, $printtolog = FALSE) {
  $stats = &drupal_static(__FUNCTION__);

  $url = drupal_get_path_alias();
  if (!isset($stats[$url])) {
    $stats[$url] = array(
      'REQUEST_TIME' => isset($_SERVER["REQUEST_TIME_FLOAT"])?$_SERVER["REQUEST_TIME_FLOAT"]:microtime(TRUE),
      'whats' => array(),
    );
  }
  $whatstats = array('what' => $what, 'time' => microtime(TRUE));
  if (isset($time_since)) {
    $whatstats['since'] = $time_since;
  }
  if (isset($info)) {
    $whatstats['info'] = $info;
  }
  $stats[$url]['whats'][] = $whatstats;

  if ($printtolog) {
    $messages = array();
    $date = date("Ymd");
    $time = date("G:i:s");
    $path = "/tmp/bottleneckspotter_$date.log";
    foreach ($stats as $url => $urlstats) {
      $timeurl = "$time $url";
      $start = $urlstats['REQUEST_TIME'];
      $lasts = array();
      $messages[] = "\n>>>> $timeurl\n";
      $lasttime = 0;
      foreach ($urlstats['whats'] as $number => $whatstats) {
        $what = $whatstats['what'];
        $message = "$timeurl -> $what";
        $message .= ' @ ' . ($whatstats['time'] - $start);
        if (isset($whatstats['since'])) {
          foreach ($whatstats['since'] as $related => $label) {
            if (isset($lasts[$related]['time'])) {
              $message .= ' (total for ' . $label . ':' . ($whatstats['time'] - $lasts[$related]['time']) . ')';
            }
            elseif ($related === 'REQUEST_TIME') {
              $message .= ' (total for ' . $label . ':' . ($whatstats['time'] - $start) . ')';
            }
            else {
              $message .= ' (no total for ' . $label . ')';
            }
          }
        }
        elseif ($lasttime !== 0) {
          $message .= ' (since last: ' . sprintf("%.5F", ($whatstats['time'] - $lasttime)) . ')';
        }
        if (isset($whatstats['info'])) {
          $message .= ' => ' . $whatstats['info'];
        }
        $message .= "\n";
        $messages[] = $message;
        $lasts[$what] = $whatstats;
        $lasttime = $whatstats['time'];
      }
    }
    file_put_contents($path, $messages, FILE_APPEND | LOCK_EX);
    unset($stats);
  }
}
