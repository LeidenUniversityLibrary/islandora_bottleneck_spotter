<?php

/**
 * @file
 * islandora_bottleneck_spotter.module
 *
 *
 *  Copyright 2019 Leiden University Library
 *
 *  This file is part of islandora_bottleneck_spotter.
 *
 *  islandora_bottleneck_spotter is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Page timing:
 */

/**
 * Implements hook_boot().
 */
function islandora_bottleneck_spotter_boot() {
  _islandora_bottleneck_spotter_mark('page start');
}

/**
 * Implements hook_exit().
 */
function islandora_bottleneck_spotter_exit() {
  _islandora_bottleneck_spotter_mark('page end', array('page start' => 'page'), (drupal_page_is_cacheable()?'cached':'not cached'), TRUE);
}


/**
 * Solr timing:
 */

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_bottleneck_spotter_islandora_solr_query($solrobj) {
  $info = 'q:' . $solrobj->solrQuery;
  if (isset($solrobj->solrParams['fq']) && count($solrobj->solrParams['fq']) > 0) {
    $info .= ' fq:' . implode('|', $solrobj->solrParams['fq']);
  }
  _islandora_bottleneck_spotter_mark('solr_query', NULL, $info);
}

/**
 * Implements hook_islandora_solr_query_result().
 */
function islandora_bottleneck_spotter_islandora_solr_query_result($results) {
  _islandora_bottleneck_spotter_mark('solr_result', array('solr_query' => 'solr'), 'results found: ' . $results['response']['numFound']);
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_bottleneck_spotter_islandora_solr_primary_display() {
  _islandora_bottleneck_spotter_mark('solr_1_display');
}

/**
 * Implements hook_islandora_solr_secondary_display().
 */
function islandora_bottleneck_spotter_islandora_solr_secondary_display() {
  _islandora_bottleneck_spotter_mark('solr_2_display');
}

/**
 * Implements hook_islandora_solr_metadata_display_elements_alter().
 */
function islandora_bottleneck_spotter_islandora_solr_metadata_display_elements_alter(&$elements) {
  _islandora_bottleneck_spotter_mark('solr_md_display_alter');
}

/**
 * Implements hook_islandora_solr_metadata_description_elements_alter().
 */
function islandora_bottleneck_spotter_islandora_solr_metadata_description_elements_alter(&$elements) {
  _islandora_bottleneck_spotter_mark('solr_md_description_alter');
}

/**
 * Islandora module hooks:
 */

/**
 * Implements hook_islandora_view_object().
 */
function islandora_bottleneck_spotter_islandora_view_object($object, $user, $page_number = 0, $page_size = 0) {
  _islandora_bottleneck_spotter_mark('view_object', NULL, $object->id);
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_bottleneck_spotter_islandora_object_access($op, $object, $user) {
  _islandora_bottleneck_spotter_mark('object_access', NULL, $object->id);
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_bottleneck_spotter_islandora_datastream_access($op, $object, $user) {
  _islandora_bottleneck_spotter_mark('datastream_access', NULL, $object->id);
}



/**
 * Helper function to mark the time of each.
 *
 *  @param $what
 *    a label (string) for what to mark.
 *  @param $time_since
 *    an associative array containing one key and one value, used to log the
 *    total time between two related whats:
 *     - key is the name of the related what
 *     - value is the label for the total time
 *  @param $info
 *    array with additional info to log
 *  @param $printtolog
 *    BOOL indicating if it should be logged: only use this on hook_exit!
 */
function _islandora_bottleneck_spotter_mark($what, $time_since = NULL, $info = NULL, $printtolog = FALSE) {
  $stats = &drupal_static(__FUNCTION__);

  $url = $_GET['q']; // this does not work at boot: current_path();
  if (!isset($stats[$url])) {
    $stats[$url] = array();
  }
  $stats[$url]['REQUEST_TIME'] = isset($_SERVER["REQUEST_TIME_FLOAT"])?$_SERVER["REQUEST_TIME_FLOAT"]:microtime(TRUE);
  if (!isset($stats[$url][$what])) {
    $stats[$url][$what] = array();
  }
  $whatstats = array('time' => microtime(TRUE));
  if (isset($time_since)) {
    $whatstats['since'] = $time_since;
  }
  if (isset($info)) {
    $whatstats['info'] = $info;
  }
  $stats[$url][$what][] = $whatstats;

  if ($printtolog) {
    $messages = array();
    $date = date("Ymd");
    $time = date("G:i:s");
    $path = "/tmp/bottleneckspotter_$date.log";
    $newstats = array();
    foreach ($stats as $url => $urlstats) {
      $alias = drupal_lookup_path('alias', $url);
      if ($alias && $url !== $alias) {
        if (isset($newstats[$alias])) {
          $urlstats = array_merge($newstats[$alias], $urlstats);
        }
        $url = $alias;
      }
      $newstats[$url] = $urlstats;
    }
    foreach ($newstats as $url => $urlstats) {
      $timeurl = "$time $url";
      $start = $urlstats['REQUEST_TIME'];
      unset($urlstats['REQUEST_TIME']);
      foreach ($urlstats as $what => $whatstatsarray) {
        foreach ($whatstatsarray as $number => $whatstats) {
          $message = "$timeurl -> $what";
          $message .= ' @ ' . ($whatstats['time'] - $start);
          if (isset($whatstats['since'])) {
            foreach ($whatstats['since'] as $related => $label) {
              if (isset($urlstats[$related][$number]['time'])) {
                $message .= ' (total for ' . $label . ':' . ($whatstats['time'] - $urlstats[$related][$number]['time']) . ')';
              }
              else {
                $message .= ' (no total for ' . $label . ')';
              }
            }
          }
          if (isset($whatstats['info'])) {
            $message .= ' => ' . $whatstats['info'];
          }
          $message .= "\n";
        }
        $messages[] = $message;
      }
    }
    file_put_contents($path, $messages, FILE_APPEND);
    unset($stats);
  }
}
